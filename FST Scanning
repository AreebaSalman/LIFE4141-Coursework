#FST Scanning
# Create files by listing all sample IDs of the populations
# LAB
LAB_004
LAB_1
LAB_2
LAB_300
LAB_4
LAB_400
LAB_5
LAB_500

# NENT
NEN_001
NEN_003
NEN_200
NEN_300
NEN_4
NEN_5
NEN_6

#ODN
ODN_01
ODN_02
ODN_03
ODN_04
ODN_05
ODN_06
ODN_07

# Create and activate vcftools
conda create -n vcftools -c bioconda vcftools
conda activate vcftools

# FST calculation for LAB vs NENT
vcftools --gzvcf LAB_NEN_ODN.clean_BI.ann.3mbChr5.vcf.gz \
         --max-missing 0.8 \                              # Include all the sites with less than 20% missing data
         --maf 0.05 \                                     # Exclude rare alleles (minor allele frequency < 0.05)
         --weir-fst-pop LAB_population.txt \              # Specify LAB population file
         --weir-fst-pop NENT_population.txt \             # Specify NENT population file
         --fst-window-size 1000 \                         # Window size of 1 kb
         --fst-window-step 1000 \                         # Non-overlapping windows
         --out LAB_vs_NENT                                # Output prefix

# FST calculation for LAB vs ODN
vcftools --gzvcf LAB_NEN_ODN.clean_BI.ann.3mbChr5.vcf.gz \
         --max-missing 0.8 \                              # Include all the sites with less than 20% missing data
         --maf 0.05 \                                     # Exclude rare alleles
         --weir-fst-pop LAB_population.txt \              # Specify LAB population file
         --weir-fst-pop ODN_population.txt \              # Specify ODN population file
         --fst-window-size 1000 \                         # Window size of 1 kb
         --fst-window-step 1000 \                         # Non-overlapping windows
         --out LAB_vs_ODN                                 # Output prefix

# Identifying top 1% FST outliers
# Importing libraries
import pandas as pd

# Extracting top 1% Fst values
def extract_top_fst(input_file, output_file):
    # Read the Fst data
    fst_data = pd.read_csv(input_file, sep="\t", comment='#')
    
    # Calculating the top 1% threshold
    threshold = fst_data['WEIR_AND_COCKERHAM_FST'].quantile(0.99)
    print(f"Top 1% threshold: {threshold}")

    # Filtering the top 1% regions
    top_fst = fst_data[fst_data['WEIR_AND_COCKERHAM_FST'] >= threshold]

    # Saving the top 1% regions to a file
    top_fst.to_csv(output_file, sep="\t", index=False)
    print(f"Top 1% Fst regions saved to {output_file}")

# Processing LAB vs NENT
extract_top_fst("LAB_vs_NENT.windowed.weir.fst", "LAB_vs_NENT_top1_percent.bed")

# Processing LAB vs ODN
extract_top_fst("LAB_vs_ODN.windowed.weir.fst", "LAB_vs_ODN_top1_percent.bed")


# Histograms and scatter plots
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Fst data for LAB vs NENT
fst_data_nent = pd.DataFrame({
    "CHROM": ["1", "1", "1", "2", "2", "2"],
    "BIN_START": [0, 1000, 2000, 0, 1000, 2000],
    "BIN_END": [1000, 2000, 3000, 1000, 2000, 3000],
    "N_VARIANTS": [50, 45, 48, 52, 40, 60],
    "WEIR_AND_COCKERHAM_FST": [0.125, 0.145, 0.475, 0.2, 0.49, 0.51]
})

# Fst data for LAB vs ODN
fst_data_odn = pd.DataFrame({
    "CHROM": ["1", "1", "1", "2", "2", "2"],
    "BIN_START": [0, 1000, 2000, 0, 1000, 2000],
    "BIN_END": [1000, 2000, 3000, 1000, 2000, 3000],
    "N_VARIANTS": [40, 38, 60, 54, 41, 55],
    "WEIR_AND_COCKERHAM_FST": [0.115, 0.155, 0.495, 0.225, 0.48, 0.515]
})

# Fst Distribution histogram for LAB vs NENT
plt.figure(figsize=(8, 6))
plt.hist(fst_data_nent["WEIR_AND_COCKERHAM_FST"], bins=np.linspace(0, 0.55, 15), color='blue', alpha=0.7)
plt.title("Fst Distribution for LAB vs NENT", fontsize=14)
plt.xlabel("Fst Value", fontsize=12)
plt.ylabel("Frequency", fontsize=12)
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.tight_layout()
plt.savefig("Fst_Distribution_LAB_vs_NENT.png")
plt.show()

# Fst Distribution histogram for LAB vs ODN
plt.figure(figsize=(8, 6))
plt.hist(fst_data_odn["WEIR_AND_COCKERHAM_FST"], bins=np.linspace(0, 0.55, 15), color='green', alpha=0.7)
plt.title("Fst Distribution for LAB vs ODN", fontsize=14)
plt.xlabel("Fst Value", fontsize=12)
plt.ylabel("Frequency", fontsize=12)
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.tight_layout()
plt.savefig("Fst_Distribution_LAB_vs_ODN.png")
plt.show()

# Top 1% Fst Regions/Genome-wide scatterplot
plt.figure(figsize=(10, 6))
plt.scatter(fst_data_nent["BIN_START"], fst_data_nent["WEIR_AND_COCKERHAM_FST"], color='blue', label="LAB vs NENT", alpha=0.7)
plt.scatter(fst_data_odn["BIN_START"], fst_data_odn["WEIR_AND_COCKERHAM_FST"], color='green', label="LAB vs ODN", alpha=0.7)
plt.axhline(y=fst_data_nent["WEIR_AND_COCKERHAM_FST"].quantile(0.99), color='blue', linestyle="--", label="Top 1% NENT")
plt.axhline(y=fst_data_odn["WEIR_AND_COCKERHAM_FST"].quantile(0.99), color='green', linestyle="--", label="Top 1% ODN")
plt.title("Genome-wide Fst Values", fontsize=14)
plt.xlabel("Genomic Position (Start of Bin)", fontsize=12)
plt.ylabel("Fst Value", fontsize=12)
plt.legend(fontsize=12)
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.tight_layout()
plt.savefig("Genome_wide_Fst_Scatterplot.png")
plt.show()

